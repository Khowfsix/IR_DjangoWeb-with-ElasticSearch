from elasticsearch import Elasticsearch
from elasticsearch.helpers import bulk
import json
from datetime import datetime

from django.http import HttpResponse
from django.shortcuts import render

from .models import Book

# Sửa password lại theo từng server
HOST = "https://localhost:9200"
ELASTIC_USER = "elastic"
# The password for the 'elastic' user generated by Elasticsearch
ELASTIC_PASSWORD = "-JpPuDA43hk+xp*OYAPq"
# The path of ca certificates
CA_CERTS = "C:/UTEXLMS/Nam3_2022_2023/HK2/TruyTimThongTin/elasticsearch-8.6.2/config/certs/http_ca.crt"

# Create the client instance
es = Elasticsearch(
    hosts=HOST,
    ca_certs=CA_CERTS,
    http_auth=(ELASTIC_USER, ELASTIC_PASSWORD),
)

# Define index name of project
index_name = 'finalproject_index'
type_name = "_search"

def priceFilter(request):
    """
    Hiển thị tất cả các sách trong khoảng giá được nhập vào 
    Input: Request 
    Output: Query thành phần trong phần range trong query tổng
    """
    # Lấy giá trị giá nhỏ nhất được nhập từ web
    gtePrice = request.POST.get('gtePrice')
    # Lấy giá trị giá lớn nhất được nhập từ web
    ltePrice = request.POST.get('ltePrice')
    # Nếu không có giá trị trong 2 biến đó 
    if gtePrice is None and ltePrice is None:
        # Thì trả về rỗng --> tìm trên tất cả khoảng giá
        return {}
    else:
        return {
            "gte": gtePrice,
            "lte": ltePrice
            }

def pageNumberFilter(request):
    """
    Hiển thị tất cả các sách trong khoảng số trang được nhập vào 
    Input: Request 
    Output: Query thành phần trong phần range trong query tổng
    """
    # Lấy giá trị số trang nhỏ nhất được nhập từ web
    gtePageNumber = request.POST.get('gtePageNumber')
    # Lấy giá trị số trang lớn nhất được nhập từ web
    ltePageNumber = request.POST.get('ltePageNumber')
    # Nếu không có giá trị trong 2 biến đó 
    if gtePageNumber is None and ltePageNumber is None:
        # Thì trả về rỗng --> tìm trên tất cả khoảng số trang
        return {}
    else:
        return {
            "gte": gtePageNumber,
            "lte": ltePageNumber
            }

def releaseDateFilter(request):
    """
    Hiển thị tất cả các sách trong khoảng ngày phát hành được nhập vào 
    Input: Request 
    Output: Query thành phần trong phần range trong query tổng
    """
    # Lấy giá trị ngày phát hành nhỏ nhất được nhập từ web
    gteReleaseDate = request.POST.get('gteReleaseDate')
    # Lấy giá trị ngày phát hành lớn nhất được nhập từ web
    lteReleaseDate = request.POST.get('lteReleaseDate')
    # Nếu không có giá trị trong 2 biến đó 
    if gteReleaseDate is None and lteReleaseDate is None:
        # Thì trả về rỗng --> tìm trên tất cả khoảng ngày phát hành
        return {}
    else:
        return {
            "gte": gteReleaseDate,
            "lte": lteReleaseDate
            }

def categoryFilter(request):
    """
    Hiển thị tất cả các sách trong các danh mục được chọn 
    Input: Request 
    Output: Query thành phần trong query tổng
    """
    DanhMuc = []
    if request.method == 'POST':
        DanhMuc = request.POST.getlist('DanhMuc')
    
    if DanhMuc == []:
        return [];
    
    query = []
    for loai in DanhMuc:
        query.append({"match_phrase": {"Danh mục": loai}})
    return query

def authorFilter(request):
    """
    Hiển thị tất cả các sách trong các tác giả được chọn 
    Input: Request 
    Output: Query thành phần trong query tổng
    """
    TacGia = []
    if request.method == 'POST':
        TacGia = request.POST.getlist('TacGia')
    
    if TacGia == []:
        return [];
    
    query = []
    for tacgia in TacGia:
        query.append({"match_phrase": {"Tác giả": tacgia}})
    return query

def translatorFilter(request):
    """
    Hiển thị tất cả các sách trong các tác giả được chọn 
    Input: Request 
    Output: Query thành phần trong query tổng
    """
    DichGia = []
    if request.method == 'POST':
        DichGia = request.POST.getlist('DichGia')
    
    if DichGia == []:
        return [];
    
    query = []
    for dichgia in DichGia:
        query.append({"match_phrase": {"Dịch giả": dichgia}})
    return query

def publisherFilter(request):
    """
    Hiển thị tất cả các sách trong các nhà xuất bản được chọn 
    Input: Request 
    Output: Query thành phần trong query tổng
    """
    NXB = []
    if request.method == 'POST':
        NXB = request.POST.getlist('NhaXuatBan')
    
    if NXB == []:
        return [];
    
    query = []
    for nxb in NXB:
        query.append({"match_phrase": {"Nhà xuất bản": nxb}})
    return query
  
def getUniqueCategory():
    """ Lấy danh sách danh mục

    Returns:
        listDanhMuc: kiểu dict chứa key là tên, value là số lượng doc của các danh mục
    """
    aggs = {
                'bucket': {
                'terms': {
                    'field': 'Danh mục.keyword',
                    'size': 10
                    }
                }
            }
    search_result = aggregate(aggs)

    listDanhMuc = {}
    # Lấy kết quả query 
    for bucket in search_result['aggregations']['bucket']['buckets']:
        listDanhMuc[bucket.get('key')] = bucket.get('doc_count')
    return listDanhMuc

def getUniqueAuthor():
    """ Lấy danh sách tác giả

    Returns:
        listTacGia: kiểu dict chứa key là tên tác giả, value là số lượng sách
    """
    aggs = {
                'bucket': {
                'terms': {
                    'field': 'Tác giả.keyword'
                    }
                }
            }
    search_result = aggregate(aggs)

    listTacGia = {}
    # Lấy kết quả query 
    for bucket in search_result['aggregations']['bucket']['buckets']:
        listTacGia[bucket.get('key')] = bucket.get('doc_count')
    return listTacGia

def getUniqueTranslator():
    """ Lấy danh sách dịch giả

    Returns:
        listDichGia: kiểu dict chứa key là tên dịch giả, value là số lượng sách
    """
    aggs = {
                'bucket': {
                'terms': {
                    'field': 'Dịch giả.keyword'
                    }
                }
            }
    search_result = aggregate(aggs)

    listDichGia = {}
    # Lấy kết quả query 
    for bucket in search_result['aggregations']['bucket']['buckets']:
        listDichGia[bucket.get('key')] = bucket.get('doc_count')
    return listDichGia

def getUniquePublisher():
    """ Lấy danh sách nhà xuất bản

    Returns:
        listNXB: kiểu dict chứa key là tên NXB, value là số lượng sách
    """
    aggs = {
                'bucket': {
                'terms': {
                    'field': 'Nhà xuất bản.keyword'
                    }
                }
            }
    search_result = aggregate(aggs)

    listNXB = {}
    # Lấy kết quả query 
    for bucket in search_result['aggregations']['bucket']['buckets']:
        listNXB[bucket.get('key')] = bucket.get('doc_count')
    return listNXB

def filter(request):
    """
    Hiển thị danh sách các quyển sách được lọc qua filter
    Input: Filter
    """
    keyword = request.POST.get('keyword')
    print(keyword)
    # Khi keyword là None thì chỉnh sửa query thành filter không có keyword
    if (keyword is None):
        keyword = ''
        query = {
            "bool": {
                "must": [
                    {
                        "bool": {
                        "should": categoryFilter(request)
                        }
                    },
                    {
                        "bool": {
                            "should": authorFilter(request)
                        }
                    },
                    {
                        "bool": {
                            "should": translatorFilter(request)
                        }
                    },
                    {
                        "bool": {
                            "should": publisherFilter(request)
                        }
                    }
                ],
                "filter": [
                    {
                        "range": {
                            "Giá Nhã Nam": priceFilter(request=request)
                        }
                    },
                    {
                        "range": {
                            "Ngày phát hành": releaseDateFilter(request)
                        }
                    },
                    {
                        "range": {
                            "Số trang": pageNumberFilter(request)
                        }
                    }
                ]
            }
        }
    else:
        print("have keyword") 
        query = {
            "bool": {
                "must": [
                    {
                        "bool": {
                        "should": categoryFilter(request)
                        }
                    },
                    {
                        "bool": {
                            "should": authorFilter(request)
                        }
                    },
                    {
                        "bool": {
                            "should": translatorFilter(request)
                        }
                    },
                    {
                        "bool": {
                            "should": publisherFilter(request)
                        }
                    },
                    {
                        "bool": {
                            "should": {
                                "multi_match" : {
                                "query":    keyword, 
                                "fields": [ "Giới thiệu sách", "Tên^5" ] 
                                }
                            },
                        }
                    }
                ],
                "filter": [
                    {
                        "range": {
                            "Giá Nhã Nam": priceFilter(request=request)
                        }
                    },
                    {
                        "range": {
                            "Ngày phát hành": releaseDateFilter(request)
                        }
                    },
                    {
                        "range": {
                            "Số trang": pageNumberFilter(request)
                        }
                    }
                ]
            }
        }
    
    search_result = search(query, 300)
    listBooks = []
    # Lấy kết quả query sang object Books
    for hit in search_result['hits']['hits']:
        JSbook = hit.get('_source')
        ObBook = Book()
        ObBook.DanhMuc = JSbook.get('Danh mục')
        ObBook.LinkImage = JSbook.get('LinkImage')
        ObBook.Ten = JSbook.get('Tên')
        ObBook.MaSanPham = JSbook.get('Mã sản phẩm')
        ObBook.TacGia = JSbook.get('Tác giả')
        ObBook.NhaXuatBan = JSbook.get('Nhà xuất bản')

        if (JSbook.get('Số trang') is not None):
            ObBook.SoTrang = int(JSbook.get('Số trang'))

        ObBook.KichThuoc = JSbook.get('Kích thước')

        if (JSbook.get('Ngày phát hành') is not None):
            ObBook.NgayPhatHanh = datetime.strptime(JSbook.get('Ngày phát hành'), '%d-%m-%Y')

        ObBook.GiaBia = JSbook.get('Giá bìa')
        ObBook.GiaNhaNam = JSbook.get('Giá Nhã Nam')
        ObBook.GioiThieuSach = JSbook.get('Giới thiệu sách')
        listBooks.append(ObBook)

    DanhMuc_Selected = getUniqueCategory()
    TacGia_Selected = []
    DichGia_Selected = []
    NhaXuatBan_Selected = []
    gtePageNumber = 10
    ltePageNumber = 1600
    gtePrice = 9600
    ltePrice = 560000
    
    if request.method == 'POST':
        DanhMuc_Selected = request.POST.getlist('DanhMuc')
        TacGia_Selected = request.POST.getlist('TacGia')
        DichGia_Selected = request.POST.getlist('DichGia')
        NhaXuatBan_Selected = request.POST.getlist('NhaXuatBan')
        gtePageNumber = request.POST.get('gtePageNumber')
        if gtePageNumber is None: 
            gtePageNumber = 10
        ltePageNumber = request.POST.get('ltePageNumber')
        if ltePageNumber is None: 
            ltePageNumber = 1600
        gtePrice = request.POST.get('gtePrice')
        if gtePrice is None: 
            gtePrice = 9600
        ltePrice = request.POST.get('ltePrice')
        if ltePrice is None: 
            ltePrice = 560000

    searchContext = {
        "keyword": keyword,
        "Books": listBooks,
        "DanhMucs": getUniqueCategory().keys(),
        "TacGias": getUniqueAuthor().keys(),
        "DichGias": getUniqueTranslator().keys(),
        "NhaXuatBans": getUniquePublisher().keys(),
        'DanhMuc_Selected': DanhMuc_Selected,
        'TacGia_Selected': TacGia_Selected,
        'DichGia_Selected': DichGia_Selected,
        'NhaXuatBan_Selected': NhaXuatBan_Selected,
        'gtePageNumber': gtePageNumber,
        'ltePageNumber': ltePageNumber,
        'gtePrice': gtePrice,
        'ltePrice': ltePrice
    }
    return render(request=request,
                  template_name='index.html',
                  context=searchContext)

def aggregate(aggs):
    global index_name, es
    return es.search(index=index_name,
                    body = {
                        "size": 0,
                        "aggs": aggs
                        }
                    )

def search(query, size):
    global index_name, es
    return es.search(index=index_name,
                     body={
                         "query": query,
                         "from": 0,
                         "size": size,
                         "sort":
                             {
                                 "_score":
                                     {
                                         "order": "desc"
                                     }
                             }
                     })

# Create your views here.
def index_view(request):
    """
    Hiển thị tất cả các sách trong dataset
    """
    listBooks = []

    # Truy vấn tất cả dữ liệu trong index bằng match_all()
    ## query all
    query = {
        "match_all": {},
    }
    search_result = search(query, 300)

    # Lấy kết quả query sang object Books
    for hit in search_result['hits']['hits']:
        JSbook = hit.get('_source')
        ObBook = Book()
        ObBook.DanhMuc = JSbook.get('Danh mục')
        ObBook.LinkImage = JSbook.get('LinkImage')
        ObBook.Ten = JSbook.get('Tên')
        ObBook.MaSanPham = JSbook.get('Mã sản phẩm')
        ObBook.TacGia = JSbook.get('Tác giả')
        ObBook.NhaXuatBan = JSbook.get('Nhà xuất bản')

        if (JSbook.get('Số trang') is not None):
            ObBook.SoTrang = int(JSbook.get('Số trang'))

        ObBook.KichThuoc = JSbook.get('Kích thước')

        if (JSbook.get('Ngày phát hành') is not None):
            ObBook.NgayPhatHanh = datetime.strptime(JSbook.get('Ngày phát hành'), '%d-%m-%Y')

        ObBook.GiaBia = JSbook.get('Giá bìa')
        ObBook.GiaNhaNam = JSbook.get('Giá Nhã Nam')
        ObBook.GioiThieuSach = JSbook.get('Giới thiệu sách')

        # print(ObBook.Ten)
        listBooks.append(ObBook)

    indexContext = {
        "Books": listBooks
    }
    return render(request=request,
                  template_name='index.html',
                  context=indexContext)

def getBook_fromResults(search_result):
    listBooks = []

    # Lấy kết quả query sang object Books
    for hit in search_result['hits']['hits']:
        JSbook = hit.get('_source')
        ObBook = Book()
        ObBook.DanhMuc = JSbook.get('Danh mục')
        ObBook.LinkImage = JSbook.get('LinkImage')
        ObBook.Ten = JSbook.get('Tên')
        ObBook.MaSanPham = JSbook.get('Mã sản phẩm')
        ObBook.TacGia = JSbook.get('Tác giả')
        ObBook.DichGia = JSbook.get('Dịch giả')
        ObBook.NhaXuatBan = JSbook.get('Nhà xuất bản')

        if (JSbook.get('Số trang') is not None):
            ObBook.SoTrang = int(JSbook.get('Số trang'))

        ObBook.KichThuoc = JSbook.get('Kích thước')

        if (JSbook.get('Ngày phát hành') is not None):
            ObBook.NgayPhatHanh = datetime.strptime(JSbook.get('Ngày phát hành'), '%d-%m-%Y')

        ObBook.GiaBia = JSbook.get('Giá bìa')
        ObBook.GiaNhaNam = JSbook.get('Giá Nhã Nam')
        ObBook.GioiThieuSach = JSbook.get('Giới thiệu sách')

        # print(ObBook.Ten)
        listBooks.append(ObBook)

    return listBooks

def detail_view(request, id):
    """
    Hiện thị thông tin của 1 quyển sách
        và top 20 quyển sách khác có liên quan
    Input: 1 quyển sách
    """

    ## Lấy quyển hiện tại
    queryThisBook = {
        "match": {
            "Mã sản phẩm": id
        }
    }
    print(queryThisBook)
    search_result = search(queryThisBook, 1)
    thisBook = getBook_fromResults(search_result=search_result)[0]

    ## Lấy 20 quyển sách co liên quan
    queryRelatedBook = {
        "bool": {
            "should": [
                {
                    "match": {
                        "Danh mục": thisBook.DanhMuc
                    }
                },
                {
                    "match": {
                        "Tác giả": thisBook.TacGia
                    }
                },
                {
                    "match": {
                        "Tên": thisBook.Ten
                    }
                },
                {
                    "match": {
                        "Dịch giả": thisBook.DichGia
                    }
                },
                {
                    "match": {
                        "Nhà xuất bản": thisBook.NhaXuatBan
                    }
                },
                {
                    "match": {
                        "Giới thiệu sách": thisBook.GioiThieuSach
                    }
                }
            ],
            "minimum_should_match": 1
        }
    }
    search_result = search(queryRelatedBook, 9)
    listRelatedBooks = getBook_fromResults(search_result=search_result)[1:]

    detailContext = {
        "ThisBook": thisBook,
        "RelatedBooks": listRelatedBooks,
    }

    return render(request=request,
                  template_name='book-detail.html',
                  context=detailContext)

def search_keyword_view(request):
    """
    Hiển thị danh sách các quyển sách có liên quan đến
        từ khóa được tìm kiếm theo thứ tự
    Input: Từ khóa nhập vào thanh Search
    """
    keyword = request.GET.get('keyword')
    if (keyword is None):
        return index_view(request)

    listBooks = []

    # Truy vấn dữ liệu
    query = {
        "bool": {
            "should": [
                {
                    "match": {
                        "Danh mục": keyword
                    }
                },
                {
                    "match": {
                        "Tác giả": keyword
                    }
                },
                {
                    "match": {
                        "Tên": keyword
                    }
                },
                {
                    "match": {
                        "Dịch giả": keyword
                    }
                },
                {
                    "match": {
                        "Nhà xuất bản": keyword
                    }
                },
                {
                    "match": {
                        "Giới thiệu sách": keyword
                    }
                }
            ],
            "minimum_should_match": 1
        }
    }
    search_result = search(query, 300)

    # Lấy kết quả query sang object Books
    for hit in search_result['hits']['hits']:
        JSbook = hit.get('_source')
        ObBook = Book()
        ObBook.DanhMuc = JSbook.get('Danh mục')
        ObBook.LinkImage = JSbook.get('LinkImage')
        ObBook.Ten = JSbook.get('Tên')
        ObBook.MaSanPham = JSbook.get('Mã sản phẩm')
        ObBook.TacGia = JSbook.get('Tác giả')
        ObBook.NhaXuatBan = JSbook.get('Nhà xuất bản')

        if (JSbook.get('Số trang') is not None):
            ObBook.SoTrang = int(JSbook.get('Số trang'))

        ObBook.KichThuoc = JSbook.get('Kích thước')

        if (JSbook.get('Ngày phát hành') is not None):
            ObBook.NgayPhatHanh = datetime.strptime(JSbook.get('Ngày phát hành'), '%d-%m-%Y')

        ObBook.GiaBia = JSbook.get('Giá bìa')
        ObBook.GiaNhaNam = JSbook.get('Giá Nhã Nam')
        ObBook.GioiThieuSach = JSbook.get('Giới thiệu sách')

        # print(ObBook.Ten)
        listBooks.append(ObBook)

    searchContext = {
        "Books": listBooks
    }
    return render(request=request,
                  template_name='index.html',
                  context=searchContext)
